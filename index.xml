<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baked Bits</title>
    <link>https://mcleary.github.io/</link>
    <description>Recent content on Baked Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Apr 2022 14:37:14 +0100</lastBuildDate><atom:link href="https://mcleary.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modern Sponza UE5</title>
      <link>https://mcleary.github.io/posts/modern-sponza-ue5/</link>
      <pubDate>Fri, 29 Apr 2022 14:37:14 +0100</pubDate>
      
      <guid>https://mcleary.github.io/posts/modern-sponza-ue5/</guid>
      <description>The Modern Sponza rendered in Unreal Engine 5 with Lumen The original Sponza scene is a classic in the field of computer graphics research. Originally created by Crytek for use in CRYENGINE for testing rendering features it was quickly adopted by the community making appearances in several academic papers and CG experiments. The original scene can still be downloading from the CRYENGINE Marketplace and, to this day, it is an amazing piece of graphics to look at.</description>
    </item>
    
    <item>
      <title>Easy Memory Management with the Vulkan Memory Allocator</title>
      <link>https://mcleary.github.io/posts/vulkan-memory-allocator/</link>
      <pubDate>Sun, 22 Aug 2021 20:05:21 +0100</pubDate>
      
      <guid>https://mcleary.github.io/posts/vulkan-memory-allocator/</guid>
      <description>In my post A Simple Vulkan Compute Example in C++ I described the hello world of Vulkan Compute. A very simple application that squares a vector of integers using a HLSL compute shader. It is quite an involved process, requiring many steps to be completed before getting to the actual compute shader execution. You need to:
 Create a Vulkan Instance, Physical Device, Logical Device Find the flags required to create a compute Queue Create the buffers that the shader will operate on:  Query the memory requirements for a particular buffer Find the index of the memory type to create the buffer from Allocate Memory for the buffers Map the memory and fill it with the data you want Bind the buffers to the memory   Create a Descriptor Set, Shader Module, Pipeline Create a Command Pool, Command Buffer, Fences Dispatch the shader Wait for completion Map the buffers and read the results back  It is a rather complex process just to run some program on your GPU.</description>
    </item>
    
    <item>
      <title>Creating Unreal Engine Data Assets using only Blueprints</title>
      <link>https://mcleary.github.io/posts/unreal-data-assets-from-blueprints/</link>
      <pubDate>Sat, 24 Jul 2021 12:09:47 +0100</pubDate>
      
      <guid>https://mcleary.github.io/posts/unreal-data-assets-from-blueprints/</guid>
      <description>In Unreal Engine&amp;rsquo;s terminology, a Data Asset is an asset that stores, guess what, data. It can be used, for example, to decouple the configuration from behaviour.
Data Assets in Unreal Engine all inherit from the UDataAsset. You can define a new Data Asset type by inheriting from UDataAsset and then your new data asset will become available in the Pick Data Asset Class Dialog:
I&amp;rsquo;m used to create new data assets using C++, you inherit from UDataAsset, add some members with UPROPERTY and done, however, recently I wanted to create one using only Blueprints.</description>
    </item>
    
    <item>
      <title>A Simple Vulkan Compute Example in C&#43;&#43;</title>
      <link>https://mcleary.github.io/posts/vulkan-compute-example/</link>
      <pubDate>Wed, 07 Jul 2021 12:08:26 +0100</pubDate>
      
      <guid>https://mcleary.github.io/posts/vulkan-compute-example/</guid>
      <description>Vulkan is great. It provides a cross-platform API to write applications that use the GPU to do graphics and general purpose compute. Designed from the ground-up to be a modern API, using Vulkan can be quite difficult so you better know what you&amp;rsquo;re doing if you plan to use Vulkan for your application.
Vulkan provides both a graphics and compute APIs and in this post I will focus on the compute part of it as I&amp;rsquo;m still not very familiar with the graphics side of it.</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://mcleary.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://mcleary.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
  </channel>
</rss>
